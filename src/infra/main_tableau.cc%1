#include "glob_infra_standard_includes.hh"
#include "matrix.hh"
#include "vector_ops.hh"
#include "double_vec_ops.hh"


class Tableau {
  public:
    Tableau();
  public:
    void set_matrix(const Matrix& A);
    // Austausch von e_i durch a_j, A(i,j) ist pivotelement != 0
    // returns false if A(i,j == 0
    bool exchange(const uint i, const uint j); 
  public:
    inline const uint noRows() const { return _A.noRows(); }
    inline const uint noCols() const { return _A.noCols(); }
    inline const Matrix& get_A() const { return _A; }
    inline double get_A(const uint i, const uint j) const { return _A(i,j); }
  public:
    std::ostream& print(std::ostream& os, const int aWidth) const;
  private:
    Matrix    _A;
    int_vt    _hdr_col; // indices positive: a_i  negative: e_i
    int_vt    _hdr_row; // indices positive: e_i, negative: a_i
    double_vt _kellerzeile;
};

Tableau::Tableau() : _A(), _hdr_col(), _hdr_row(), _kellerzeile() {
}

void
Tableau::set_matrix(const Matrix& A) {
  _A = A;
  const uint m = _A.noRows();
  const uint n = _A.noCols();
  _hdr_row.resize(m);
  _hdr_col.resize(n);
  _kellerzeile.resize(n);

  for(uint i = 0; i < m; ++i) {
    _hdr_row[i] = i + 1;
  }
  for(uint j = 0; j < n; ++j) {
    _hdr_col[j] = j + 1;
  }
}

bool
Tableau::exchange(const uint ii, const uint jj) {
  const uint m = _A.noRows();
  const uint n = _A.noCols();
  
  if(0 == _A(ii,jj)) {
    return false;
  }

  double lPiv = (((double) 1.0) / _A(ii,jj)); // reciprocal of pivot

  // berechne kellerzeile (1 in Nef p54)

  for(uint j = 0; j < n; ++j) {
    if(0 == _A(ii,j)) {
      _kellerzeile[j] = 0;
    } else {
      _kellerzeile[j] = -(_A(ii,j) * lPiv);
    }
  }

  // copy kellerzeile to row exchanged
  for(uint j = 0; j < n; ++j) {
    if(j == jj) {
      _A(ii,j) = lPiv;
    } else {
      _A(ii,j) = _kellerzeile[j];
    }
  }

  // block 2
  for(uint i = 0; i < m; ++i) {
    if(i == ii) {
      continue;
    }
    for(uint j = 0; j < n; ++j) {
      if(j == jj) {
        continue;
      }
      _A(i,j) += _kellerzeile[j] * _A(i,jj);
    }
  }

  // block 1 (vertauscht gegenueber Nef p64 um mit bsp kompatibel zu machen
  for(uint i = 0; i < m; ++i) {
    if(i == ii) {
      continue;
    }
    _A(i,jj) *= lPiv;
  }

  // adjust header
  _hdr_row[ii] = -(jj+1);
  _hdr_col[jj] = -(ii+1);
  return 0;
}

std::ostream&
Tableau::print(std::ostream& os, const int aWidth) const {
  const uint m = noRows();
  const uint n = noCols(); 

  const int lWidth = std::max(6, aWidth);
  os << "        ";
  for(uint j = 0; j < noCols(); ++j) {
    if(0 < _hdr_col[j]) {
      os << ' ' << "a_{" << std::setw(2) << std::left << _hdr_col[j] << '}';
    } else {
      os << ' ' << "e_{" << std::setw(2) << std::left << (-_hdr_col[j]) << '}';
    }
  }
  os << std::endl;
  for(uint i = 0; i < m; ++i) {
    if(0 < _hdr_row[i]) {
      os << " e_{" << std::setw(2) << std::left <<   _hdr_row[i]  << '}';
    } else{
      os << " a_{" << std::setw(2) << std::left << (-_hdr_row[i]) << '}';
    }
    for(uint j = 0; j < n; ++j) {
      os << ' ' << std::setw(lWidth) << std::right << _A(i,j);
    }
    os << std::endl;
  }
  os << "---" << std::endl;
  os << "       ";
  for(uint j = 0; j < n; ++j) {
    os << ' ' << std::setw(lWidth) << std::right << _kellerzeile[j];
  }
  os << std::endl;
  return os;
}

void
test0() {
  Matrix A(2,3);
  A(0,0) =  2; A(0,1) = 1; A(0,2) = -1;
  A(1,0) = -1; A(1,1) = 2; A(1,2) =  3;

  Tableau lTab;
  lTab.set_matrix(A);
  lTab.print(std::cout, 4) << std::endl;

  lTab.exchange(0,0);
  std::cout << "after exchange(0,0)" << std::endl;
  lTab.print(std::cout, 4) << std::endl;

  lTab.exchange(1,2);
  std::cout << "after exchange(1,2)" << std::endl;
  lTab.print(std::cout, 4) << std::endl;
}

void
test1(const uint n) {
  Matrix A(n,n);
  for(uint i = 0; i < n; ++i) {
    for(uint j = 0; j < n; ++j) {
       A(i,j) = ((i | j) == j);
    }
  }
  std::cout << "A = " << std::endl;
  A.print(std::cout, 3) << std::endl;

  Tableau lTab;
  lTab.set_matrix(A);

  for(uint i = 0; i < n; ++i) {
    lTab.exchange(i,i);
    std::cout << "after exchange(" << i << ',' << i << ')' << std::endl;
    lTab.print(std::cout, 4) << std::endl;
  }
}

void
run_ks(const uint_vt& aKsPat, const double_vt& aKsVal) {
  assert(aKsPat.size() == aKsVal.size());

  const uint n = 4;
  const uint m = aKsPat.size();
  const uint N = (1 << n);

  Matrix A(m, N + 1);
  for(uint i = 0; i < m; ++i) {
    const uint ii = lKsPat[i];
    for(uint j = 0; j < N; ++j) {
       A(i,j) =  ((ii | j) == j);
    }
  }
  for(uint i = 0; i < m; ++i) {
    A(i,N) = -aKsVal[i];
  }
  std::cout << "A = " << std::endl;
  A.print(std::cout, 3) << std::endl;

  Tableau lTab;
  lTab.set_matrix(A);

  uint_vt lColIdx; // column indices for which exchange was taken
  for(uint i = 0; i < m; ++i) {
    for(uint j = 0; j < N; ++j) {
      if(0 < A(i,j)) {
         lTab.exchange(i,j);
         std::cout << "after exchange(" << i << ',' << j << ')' << std::endl;
         lTab.print(std::cout, 4) << std::endl;
         lColIdx.push_back(j);
         break;
      }
    }
  }
  std::cout << "lColIdx = " << lColIdx << std::endl;
  // extract matrices B, C, and vector D
  Matrix B(m, lColIdx.size());
  Matrix C(m, N - lColIdx.size());
  double_vt D(m);

  uint k = 0; // index into lColIdx
  uint jjB = 0; // column index of B
  uint jjC = 0; // column index of C
  for(uint j = 0; j < N; ++j) {
    if(j == lColIdx[k]) {
      for(uint i = 0; i < m; ++i) {
        B(i, jjB) = lTab.get_A(i,j);
      }
      ++jjB;
      ++k;
    } else {
      for(uint i = 0; i < m; ++i) {
        C(i, jjC) = lTab.get_A(i,j);
      }
      ++jjC;
    }
  }
  for(uint i = 0; i < m; ++i) {
    D[i] = lTab.get_A(i,N);
  }

  std::cout << "B = " << std::endl;
  B.printLatex(std::cout, 3, 0) << std::endl;

  std::cout << "C = " << std::endl;
  C.printLatex(std::cout, 3, 0) << std::endl;

  std::cout << "D = " << D << std::endl;

}

void
test2() {
  uint_vt   lKsPat = {  0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 12 };
  double_vt lKsVal = { 75, 41, 38, 12, 38, 13, 17, 37, 14, 14, 18 };
  assert(lKsPat.size() == lKsVal.size());

  const uint n = 4;
  const uint m = lKsPat.size();
  const uint N = (1 << n);
 
  Matrix A(m, N + 1);
  for(uint i = 0; i < m; ++i) {
    const uint ii = lKsPat[i];
    for(uint j = 0; j < N; ++j) {
       A(i,j) =  ((ii | j) == j);
    }
  }
  for(uint i = 0; i < m; ++i) {
    A(i,N) = -lKsVal[i];
  }
  std::cout << "A = " << std::endl;
  A.print(std::cout, 3) << std::endl;


  Tableau lTab;
  lTab.set_matrix(A);

  uint_vt lColIdx; // column indices for which exchange was taken
  for(uint i = 0; i < m; ++i) {
    for(uint j = 0; j < N; ++j) {
      if(0 < A(i,j)) {
         lTab.exchange(i,j);
         std::cout << "after exchange(" << i << ',' << j << ')' << std::endl;
         lTab.print(std::cout, 4) << std::endl;
         lColIdx.push_back(j);
         break;
      }
    }
  }
  std::cout << "lColIdx = " << lColIdx << std::endl;
  // extract matrices B, C, and vector D
  Matrix B(m, lColIdx.size());
  Matrix C(m, N - lColIdx.size());
  double_vt D(m);

  uint k = 0; // index into lColIdx
  uint jjB = 0; // column index of B
  uint jjC = 0; // column index of C
  for(uint j = 0; j < N; ++j) {
    if(j == lColIdx[k]) {
      for(uint i = 0; i < m; ++i) {
        B(i, jjB) = lTab.get_A(i,j);
      }
      ++jjB;
      ++k;
    } else {
      for(uint i = 0; i < m; ++i) {
        C(i, jjC) = lTab.get_A(i,j);
      }
      ++jjC;
    }
  }
  for(uint i = 0; i < m; ++i) {
    D[i] = lTab.get_A(i,N);
  }

  std::cout << "B = " << std::endl;
  B.printLatex(std::cout, 3, 0) << std::endl;

  std::cout << "C = " << std::endl;
  C.printLatex(std::cout, 3, 0) << std::endl;

  std::cout << "D = " << D << std::endl;
}

void
test3() {
  uint_vt   lKsPat = {  0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 12 };
  double_vt lKsVal = { 75, 41, 38, 12, 38, 13, 17, 37, 14, 14, 18 };
  assert(lKsPat.size() == lKsVal.size());

  const uint n = 4;
  const uint m = lKsPat.size();
  const uint N = (1 << n);

  Matrix A(m, N + 1);
  for(uint i = 0; i < m; ++i) {
    const uint ii = lKsPat[i];
    for(uint j = 0; j < N; ++j) {
       A(i,j) =  ((ii | j) == j);
    }
  }
  for(uint i = 0; i < m; ++i) {
    A(i,N) = -lKsVal[i];
  }
  std::cout << "A = " << std::endl;
  A.print(std::cout, 3) << std::endl;


  Tableau lTab;
  lTab.set_matrix(A);

  uint_vt lColIdx; // column indices for which exchange was taken
  for(uint i = 0; i < m; ++i) {
    for(uint j = 0; j < N; ++j) {
      if(0 < A(i,j)) {
         lTab.exchange(i,j);
         std::cout << "after exchange(" << i << ',' << j << ')' << std::endl;
         lTab.print(std::cout, 4) << std::endl;
         lColIdx.push_back(j);
         break;
      }
    }
  }
  std::cout << "lColIdx = " << lColIdx << std::endl;
  // extract matrices B, C, and vector D
  Matrix B(m, lColIdx.size());
  Matrix C(m, N - lColIdx.size());
  double_vt D(m);

  uint k = 0; // index into lColIdx
  uint jjB = 0; // column index of B
  uint jjC = 0; // column index of C
  for(uint j = 0; j < N; ++j) {
    if(j == lColIdx[k]) {
      for(uint i = 0; i < m; ++i) {
        B(i, jjB) = lTab.get_A(i,j);
      }
      ++jjB;
      ++k;
    } else {
      for(uint i = 0; i < m; ++i) {
        C(i, jjC) = lTab.get_A(i,j);
      }
      ++jjC;
    }
  }
  for(uint i = 0; i < m; ++i) {
    D[i] = lTab.get_A(i,N);
  }

  std::cout << "B = " << std::endl;
}


int
main() {
  test0();
  test1(4);
  test1(8);
  test2();
  return 0;
}

