#include "glob_infra_standard_includes.hh"
#include "matrix.hh"

extern "C" {
  #include "cmeasure.h"
}

/*
 *   main_invut.cc
 *   there are several possibilities to calculate the inverse of some
 *   matrix A using cholesky decomposition
 *   1) decompose A into upper triangular matrix U with A = U^tU
 *   2) decompose A into lower triangular matrix L with L = LL^t
 *   then invert U or L, i.e., calculate U^{-1} or L^{-1}
 *   then calculate
 *   1) A^{-1} =  U^{-1}   (U^{-1})^t
 *   2) A^{-1} = (L^{-1}^t  L^{-1}
 *   due to the different memory access patterns 
 *   the different procedures work with different efficiency
 *   this small program checks and evaluates some possibilities
 *   the maatrix class provides
 *   for cholesky decomposition:
 *   setToSquareRootUpperTriangular(A)    --> U s.t. A = U^t U
 *   setToSquareRootLowerTriangular(A)    --> L s.t. A = L   L^t
 *   setToSquareRootLowerTriangular_XF(A) --> L s.t. A = L   L^t
 *   to directly calculate the inverse given L:
 *   inverseSquareRootLowerTriangular(L)     --> A^-1   // slow
 *   inverseSquareRootLowerTriangular_XF(L)  --> A^-1   // faster but not fast
 *   setToInverseOfUpperTriangular(U)             --> (U^-1)            // slow
 *   setToTransposedOfInverseOfUpperTriangular(U) --> (U^-1)^t = L^-1   // fast
 *   setToTransposedOfInverseOfLowerTriangular(L) --> (L^-1)^t = R^-1   // fast
 *   
 */

void
fill_upper_triangular(Matrix& U, const uint n) {
  U.resize(n,n);
  double c = 1;
  for(uint i = 0; i < n; ++i) {
    for(uint j = i; j < n; ++j) {
      U(i,j) = c;
      c += 1;
    }
  }
}

void
get_ks_pat(uint_vt& aKsPat, const uint aNoBf, const uint aNoBfKnown) {
  aKsPat.clear();
  assert(aNoBfKnown < aNoBf);
  const uint N = (1 << aNoBf);
  for(uint i = 0; i < N; ++i) {
    if(number_of_bits_set(i) <= aNoBfKnown) {
      aKsPat.push_back(i);
    }
  }
}

// copy of get_DDt
void
fill_symmetric(Matrix& DDt, const uint n) {
  // const uint n = aNoBf;
  uint_vt lKsPat;
  const uint N = (1 << n) - 1;
  for(uint i = 0; i < N; ++i) {
    lKsPat.push_back(i);
  }

  const uint m = lKsPat.size();
  DDt.resize(m,m);
  const uint lMask = (((uint) 1) << n) - 1;
  uint i, j, x;
  DDt.resize(m,m);
  for(uint ii = 0; ii < m; ++ii) {
    i = lKsPat[ii];
    DDt(ii,ii) = (1 << number_of_bits_set<uint>((~i) & lMask));
  }
  for(uint ii = 0; ii < m; ++ii) {
    i = lKsPat[ii];
    for(uint jj = ii + 1; jj < m; ++jj) {
      j = lKsPat[jj];
      x = (1 << number_of_bits_set<uint>((~(i | j)) & lMask));
      DDt(ii,jj) = x;
      DDt(jj,ii) = x;
    }
  }
}

void
get_DDt(Matrix& DDt, const uint_vt& aKsPat, const uint aNoBf) {
  const uint n = aNoBf;
  const uint m = aKsPat.size();
  DDt.resize(m,m);
  const uint lMask = (((uint) 1) << n) - 1;
  uint i, j, x;
  DDt.resize(m,m);
  for(uint ii = 0; ii < m; ++ii) {
    i = aKsPat[ii];
    DDt(ii,ii) = (1 << number_of_bits_set<uint>((~i) & lMask));
  }
  for(uint ii = 0; ii < m; ++ii) {
    i = aKsPat[ii];
    for(uint jj = ii + 1; jj < m; ++jj) {
      j = aKsPat[jj];
      x = (1 << number_of_bits_set<uint>((~(i | j)) & lMask));
      DDt(ii,jj) = x;
      DDt(jj,ii) = x;
    }
  }
}

// check whether Ainv is A^{-1}
bool
is_inverse_of(const Matrix& A, const Matrix& Ainv, const double aEps) {
  Matrix I1;
  I1.setToProductOf(A, Ainv);
  Matrix I2;
  I2.setToProductOf(Ainv, A);
  return I1.isIdentity(aEps) && I2.isIdentity(aEps);
}

// check whether deocmposition of A info U^tU is valid
bool
check_U(const Matrix& U, const Matrix& A, const double aEps) {
  Matrix UtU;
  UtU.setToProductWithFirstTransposed(U, U);
  return U.isUpperTriangular(aEps) && UtU.equalUpTo(A, aEps);
}

// check whether deocmposition of A info LL^t is valid
bool
check_L(const Matrix& L, const Matrix& A, const double aEps) {
  Matrix LLt;
  LLt.setToProductWithSecondTransposed(L, L);
  return L.isLowerTriangular(aEps) && LLt.equalUpTo(A, aEps);
}

// check whether Uinv is correctly calculated
// i.e. 
// a) Uinv = U^-1
// b) Uinv is upper triangular (also check U is upper triangular)
// c) Uinv (Uinv)^t = A^{-1}
bool
check_Uinv(const Matrix& U, const Matrix& Uinv, const Matrix& A, const double aEps) {
  Matrix UinvUinvt;
  UinvUinvt.setToProductWithSecondTransposed(Uinv, Uinv);

  const bool lRes =    U.isUpperTriangular(aEps)
                    && Uinv.isUpperTriangular(aEps)
                    && is_inverse_of(U, Uinv, aEps)
                    && is_inverse_of(UinvUinvt, A, aEps);

  if(!lRes) {
    std::cout << "check_Uinv: failure:" << std::endl;
    std::cout << "A = " << std::endl;
    A.print(std::cout, 3) << std::endl;

    std::cout << "U = " << std::endl;
    U.print(std::cout, 8) << std::endl;

    std::cout << "U^-1 = " << std::endl;
    Uinv.print(std::cout, 8) << std::endl;

    std::cout << "U^-1 (U^-1)^t = " << std::endl;
    UinvUinvt.print(std::cout, 8) << std::endl;

    Matrix UUinv;
    UUinv.setToProductOf(U, Uinv);
    std::cout << "UUinv = " << std::endl;
    UUinv.print(std::cout, 8) << std::endl;

    Matrix UinvU;
    UinvU.setToProductOf(Uinv, U);
    std::cout << "UinvU = " << std::endl;
    UinvU.print(std::cout, 8) << std::endl;
  }

  return lRes;
}

// same for Linv
bool
check_Linv(const Matrix& L, const Matrix& Linv, const  Matrix& A, const double aEps) {
  Matrix X;
  X.setToProductWithFirstTransposed(Linv, Linv);

  const bool lRes =    L.isLowerTriangular(aEps)
                    && Linv.isLowerTriangular(aEps)
                    && is_inverse_of(L, Linv, aEps)
                    && is_inverse_of(X, A, aEps);

  if(!lRes) {
    std::cout << "  check_Linv: failure:" << std::endl;
    std::cout << "A = " << std::endl;
    A.print(std::cout, 3) << std::endl;

    std::cout << "L = " << std::endl;
    L.print(std::cout, 8) << std::endl;

    std::cout << "L^-1 = " << std::endl;
    Linv.print(std::cout, 8) << std::endl;

    std::cout << "(L^-1)^t L^-1 = " << std::endl;
    X.print(std::cout, 8) << std::endl;

  }

  return lRes;
}

// check all procedures and properties
// of cholesky decomposition used to calculate inverses of A
// of all resulting matrices
// of a symmetric positive definite matrix A

bool
check_all(const Matrix& A, const double aEps) {

  // part 1: cholesky decomposition into
  // a) A = UU^t, U upper triangular
  // b) A = L^tL, L lower triangular

  Matrix U1;
  U1.setToSquareRootUpperTriangular(A);
  U1.setZeroSmallerThan(aEps);
  assert(check_U(U1, A, aEps));

  Matrix L1;
  L1.setToSquareRootLowerTriangular(A);
  L1.setZeroSmallerThan(aEps);
  assert(check_L(L1, A, aEps));

  Matrix L2;
  L2.setToSquareRootLowerTriangular_XF(A, aEps);
  L2.setZeroSmallerThan(aEps);
  assert(check_L(L2, A, aEps));

  assert(L1.equalUpTo(L2, aEps));
  assert(L1.isTransposedOf(U1, aEps));
  assert(L2.isTransposedOf(U1, aEps));

  std::cout << "  done part 1 (cholesky decomposition)." << std::endl;

  // part 2: check inversion of lower/upper triangular, and A

  Matrix U1inv;
  U1inv.setToInverseOfUpperTriangular(U1, aEps);
  U1inv.setZeroSmallerThan(aEps / 10);

  if(is_inverse_of(U1, U1inv, aEps)) {
    std::cout << "  U1inv is inverse of U." << std::endl;
  } else {
    std::cout << "  U1inv is not an inverse of U." << std::endl;
    assert(0 == 1);
  }

  assert(check_Uinv(U1, U1inv, A, aEps));

  Matrix L3inv;
  L3inv.setToTransposedOfInverseOfUpperTriangular(U1, aEps);
  L3inv.setZeroSmallerThan(aEps / 10);

  assert(check_Linv(L1, L3inv, A, aEps));
  assert(L3inv.isTransposedOf(U1inv, aEps));

  Matrix A1inv;
  A1inv.inverseSquareRootLowerTriangular(L1);
  A1inv.setZeroSmallerThan(aEps / 10);

  Matrix A2inv;
  A2inv.inverseSquareRootLowerTriangular_XF(L1);
  A2inv.setZeroSmallerThan(aEps / 10);

  assert(A1inv.equalUpTo(A2inv, aEps));

  Matrix U2inv;
  U2inv.setToTransposedOfInverseOfLowerTriangular(L1);

  if(U2inv.equalUpTo(U1inv, aEps)) {
    std::cout << "  U2inv == U1inv" << std::endl;
  } else {
    std::cout << "  U2inv != U1inv" << std::endl;
    assert(0 == 1);
  }
  assert(check_Uinv(U1, U2inv, A, aEps));

  if(is_inverse_of(A, A1inv, aEps)) {
    std::cout << "  A1inv is inverse of A." << std::endl;
  } else {
    std::cout << "  A1inv is not an inverse of A." << std::endl;
    assert(0 == 1);
  }

  if(is_inverse_of(A, A2inv, aEps)) {
    std::cout << "  A2inv is inverse of A." << std::endl;
  } else {
    std::cout << "  A2inv is not an inverse of A." << std::endl;
    assert(0 == 1);
  }

  if(is_inverse_of(L1, L3inv, aEps)) {
    std::cout << "  L3inv is inverse of L1." << std::endl;
  } else {
    std::cout << "  L3inv is not an inverse of L1." << std::endl;
    assert(0 == 1);
  }

  Matrix L3invtL3inv;
  L3invtL3inv.setToProductWithFirstTransposed(L3inv, L3inv);
  assert(L3invtL3inv.equalUpTo(A1inv, aEps));

  assert(check_Uinv(U1, U1inv, A, aEps));
  assert(check_Linv(L1, L3inv, A, aEps));

  return true;
}

bool
check_ks_pat(const uint_vt& aKsPat, const uint aNoBf, const uint aNoBfKnown) {
  std::cout << "check_ks_pat " << aNoBf << ' ' << aNoBfKnown << ' ' << aKsPat.size() << std::endl;
  Matrix A;
  get_DDt(A, aKsPat, aNoBf);
  assert(check_all(A, 1E-10));
  return true;
}

bool
check_bf(const uint aNoBf) {
  uint_vt lKsPat;
  for(uint lNoBfKnown = 2; lNoBfKnown < aNoBf; ++lNoBfKnown) {
    get_ks_pat(lKsPat, aNoBf, lNoBfKnown);
    assert(check_ks_pat(lKsPat, aNoBf, lNoBfKnown));
  }
  return true;
}

bool
check_all_bf() {
  for(uint lNoBf = 3; lNoBf <= 10; ++lNoBf) {
    assert(check_bf(lNoBf));
  }
  return true;
}


void
test0(const uint n) {
  Matrix U;

  fill_upper_triangular(U, n);
  std::cout << "U = " << std::endl;
  U.print(std::cout, 8) << std::endl;

  Matrix Uinv;
  Uinv.setToInverseOfUpperTriangular(U, 0);

  std::cout << "Uinv = " << std::endl;
  Uinv.print(std::cout, 8) << std::endl;

  Matrix Uinvt;
  Uinvt.setToTransposedOfInverseOfUpperTriangular(U, 0); 

  std::cout << "Uinvt = " << std::endl;
  Uinvt.print(std::cout, 8) << std::endl;

  for(uint i = 0; i < n; ++i) {
    for(uint j = 0; j < n; ++j) {
      if(1E-18 < std::fabs( Uinv(i,j) - Uinvt(j,i) )) {
         std::cout << i << ',' << j << ": " << Uinv(i,j) << " != " << Uinvt(j,i) << std::endl;
      }
    }
  }
  assert(Uinvt.isTransposedOf(Uinv, 0));
}

void
run(const uint n) {
  Matrix U;

  fill_upper_triangular(U, n);

  Matrix Uinv;
  cmeasure_t lM1;
  cmeasure_start(&lM1);
  Uinv.setToInverseOfUpperTriangular(U, 0);
  cmeasure_stop(&lM1);


  Matrix Uinvtt;
  Matrix Uinvt;
  cmeasure_t lM2;
  cmeasure_start(&lM2);
  Uinvt.setToTransposedOfInverseOfUpperTriangular(U, 0);
  Uinvtt.setToTransposedOf(Uinvt);
  cmeasure_stop(&lM2);

  assert(Uinvt.isTransposedOf(Uinv, 1E-16));
  assert(Uinv.equalUpTo(Uinvtt, 1E-16));

  std::cout << std::setw(7) << n << ' '
            << std::setw(13) << cmeasure_total_ms(&lM1) << ' '
            << std::setw(13) << cmeasure_total_ms(&lM2) << ' '
            << std::setw(13) << ((double) cmeasure_total_ns(&lM1) / (double) cmeasure_total_ns(&lM2))
            << std::endl;
}

void
test1() {
  std::cout << "=== test 1 ===" << std::endl;
  std::cout << "inverse of upper triangular" << std::endl;
  std::cout.setf(std::ios::fixed);
  std::cout.precision(2);
  for(uint i = 3; i < 3000; i *= 3) {
    run(i);
  }
}

void 
run_cholesky_lower(const uint n) {
  Matrix A;
  fill_symmetric(A, n);

  if(false && (5 > n)) {
    std::cout << "A = " << std::endl;
    A.print(std::cout, 3) << std::endl;
  }
 
  const uint lNoIter = 1000000 / (n * n * (1 << n)); 

  Matrix L1;

  cmeasure_t lM1;
  cmeasure_start(&lM1);
  for(uint i = 0; i < lNoIter; ++i) {
    L1.setToSquareRootLowerTriangular(A);
    L1.setZeroSmallerThan(1E-15);
  }
  cmeasure_stop(&lM1);

  if(false && (5 > n)) {
    std::cout << "L1 = " << std::endl;
    L1.print(std::cout, 8) << std::endl;
  }

  Matrix L2;
  cmeasure_t lM2;
  cmeasure_start(&lM2);
  for(uint i = 0; i < lNoIter; ++i) {
    L2.setToSquareRootLowerTriangular_XF(A, 0);
    L2.setZeroSmallerThan(1E-15);
  }
  cmeasure_stop(&lM2);

  if(false && (5 > n)) {
    std::cout << "L2 = " << std::endl;
    L2.print(std::cout, 8) << std::endl;
  }

  assert(L2.equalUpTo(L1, 1E-11));


  Matrix L1inv;
  cmeasure_t lM3;
  cmeasure_start(&lM3);
  for(uint i = 0; i < lNoIter; ++i) {
    L1inv.inverseSquareRootLowerTriangular(L2);
  }
  cmeasure_stop(&lM3);

  if(false && (5 > n)) {
    std::cout << "L1inv = " << std::endl;
    L1inv.print(std::cout, 8) << std::endl;
  }

  Matrix L2inv;
  cmeasure_t lM4;
  cmeasure_start(&lM4);
  for(uint i = 0; i < lNoIter; ++i) {
    L2inv.inverseSquareRootLowerTriangular_XF(L2);
  }
  cmeasure_stop(&lM4);

  if(false && (5 > n)) {
    std::cout << "L2inv = " << std::endl;
    L2inv.print(std::cout, 8) << std::endl;
  }

  assert(L1inv.equalUpTo(L2inv, 1E-12));

  std::cout << std::setw(2) << n << " | "
            << std::setw(13) << cmeasure_div_ms(&lM1, lNoIter) << ' '
            << std::setw(13) << cmeasure_div_ms(&lM2, lNoIter) << ' '
            << std::setw(13) << ((double) cmeasure_total_ns(&lM1) / (double) cmeasure_total_ns(&lM2)) << " | "
            << std::setw(13) << cmeasure_div_ms(&lM3, lNoIter) << ' '
            << std::setw(13) << cmeasure_div_ms(&lM4, lNoIter) << ' '
            << std::setw(13) << ((double) cmeasure_total_ns(&lM3) / (double) cmeasure_total_ns(&lM4))
            << std::endl;


}


void 
run_cholesky_upper(const uint n) {
  Matrix A;
  fill_symmetric(A, n);

  if(false && (5 > n)) {
    std::cout << "A = " << std::endl;
    A.print(std::cout, 3) << std::endl;
  }
 
  const uint lNoIter = 1000000 / (n * n * (1 << n)); 

  Matrix U1;

  cmeasure_t lM1;
  cmeasure_start(&lM1);
  for(uint i = 0; i < lNoIter; ++i) {
    U1.setToSquareRootUpperTriangular(A);
    U1.setZeroSmallerThan(1E-15);
  }
  cmeasure_stop(&lM1);

  if(false && (5 > n)) {
    std::cout << "U1 = " << std::endl;
    U1.print(std::cout, 8) << std::endl;
  }

  Matrix U2;
  cmeasure_t lM2;
  cmeasure_start(&lM2);
  for(uint i = 0; i < lNoIter; ++i) {
    U2.setToSquareRootUpperTriangular(A);
    U2.setZeroSmallerThan(1E-15);
  }
  cmeasure_stop(&lM2);

  if(false && (5 > n)) {
    std::cout << "U2 = " << std::endl;
    U2.print(std::cout, 8) << std::endl;
  }

  assert(U2.equalUpTo(U1, 1E-12));


  Matrix U1inv;
  cmeasure_t lM3;
  cmeasure_start(&lM3);
  for(uint i = 0; i < lNoIter; ++i) {
    U1inv.setToInverseOfUpperTriangular(U2, 1E-14);
  }
  cmeasure_stop(&lM3);

  if(false && (5 > n)) {
    std::cout << "U1inv = " << std::endl;
    U1inv.print(std::cout, 8) << std::endl;
  }

  Matrix U2inv;
  Matrix U2invt;
  cmeasure_t lM4;
  cmeasure_start(&lM4);
  for(uint i = 0; i < lNoIter; ++i) {
    // U2inv.setToInverseOfUpperTriangular(U2, 1E-14);
    U2invt.setToTransposedOfInverseOfUpperTriangular(U2, 0);
    U2inv.setToTransposedOf(U2invt);
  }
  cmeasure_stop(&lM4);

  if(false && (5 > n)) {
    std::cout << "U2inv = " << std::endl;
    U2inv.print(std::cout, 8) << std::endl;
  }

  assert(U1inv.equalUpTo(U2inv, 1E-12));

  std::cout << std::setw(2) << n << " | "
            << std::setw(13) << cmeasure_div_ms(&lM1, lNoIter) << ' '
            << std::setw(13) << cmeasure_div_ms(&lM2, lNoIter) << ' '
            << std::setw(13) << ((double) cmeasure_total_ns(&lM1) / (double) cmeasure_total_ns(&lM2)) << " | "
            << std::setw(13) << cmeasure_div_ms(&lM3, lNoIter) << ' '
            << std::setw(13) << cmeasure_div_ms(&lM4, lNoIter) << ' '
            << std::setw(13) << ((double) cmeasure_total_ns(&lM3) / (double) cmeasure_total_ns(&lM4))
            << std::endl;


}

void
test2() {
  std::cout << "=== test 2 ===" << std::endl;
  std::cout << " n" << " | "
            << std::setw(13) << "chol decomp" << ' '
            << std::setw(13) << "chol decomp" << ' '
            << std::setw(13) << "ratio" << " | "
            << std::setw(13) << "inv triangular" << ' '
            << std::setw(13) << "inv triangular" << ' '
            << std::setw(13) << "ratio"
            << std::endl;

  std::cout << "cholesky lower" << std::endl;
  run_cholesky_lower(3);
  run_cholesky_lower(4);
  run_cholesky_lower(5);
  run_cholesky_lower(6);
  run_cholesky_lower(7);
  run_cholesky_lower(8);
  run_cholesky_lower(9);
  run_cholesky_lower(10);
  std::cout << "cholesky upper" << std::endl;
  run_cholesky_upper(3);
  run_cholesky_upper(4);
  run_cholesky_upper(5);
  run_cholesky_upper(6);
  run_cholesky_upper(7);
  run_cholesky_upper(8);
  run_cholesky_upper(9);
  run_cholesky_upper(10);
}

int
main() {
  const bool lTestInverseOfUpperTriangular = true;
  const bool lTestCholesky = true;
  check_all_bf();

  if(lTestInverseOfUpperTriangular) {
    // test0(4);
    // test0(5);
    // test0(6);
    test1();
  }
  if(lTestCholesky) {
    test2();
  }
  return 0;
}

